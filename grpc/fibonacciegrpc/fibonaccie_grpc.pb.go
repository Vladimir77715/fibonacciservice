// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fibonacciegrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FibonaccieClient is the client API for Fibonaccie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FibonaccieClient interface {
	GetFibonacciStream(ctx context.Context, in *Range, opts ...grpc.CallOption) (Fibonaccie_GetFibonacciStreamClient, error)
}

type fibonaccieClient struct {
	cc grpc.ClientConnInterface
}

func NewFibonaccieClient(cc grpc.ClientConnInterface) FibonaccieClient {
	return &fibonaccieClient{cc}
}

func (c *fibonaccieClient) GetFibonacciStream(ctx context.Context, in *Range, opts ...grpc.CallOption) (Fibonaccie_GetFibonacciStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Fibonaccie_ServiceDesc.Streams[0], "/fibonaccie.Fibonaccie/GetFibonacciStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fibonaccieGetFibonacciStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fibonaccie_GetFibonacciStreamClient interface {
	Recv() (*FibonaccieItems, error)
	grpc.ClientStream
}

type fibonaccieGetFibonacciStreamClient struct {
	grpc.ClientStream
}

func (x *fibonaccieGetFibonacciStreamClient) Recv() (*FibonaccieItems, error) {
	m := new(FibonaccieItems)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FibonaccieServer is the server API for Fibonaccie service.
// All implementations must embed UnimplementedFibonaccieServer
// for forward compatibility
type FibonaccieServer interface {
	GetFibonacciStream(*Range, Fibonaccie_GetFibonacciStreamServer) error
	mustEmbedUnimplementedFibonaccieServer()
}

// UnimplementedFibonaccieServer must be embedded to have forward compatible implementations.
type UnimplementedFibonaccieServer struct {
}

func (UnimplementedFibonaccieServer) GetFibonacciStream(*Range, Fibonaccie_GetFibonacciStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFibonacciStream not implemented")
}
func (UnimplementedFibonaccieServer) mustEmbedUnimplementedFibonaccieServer() {}

// UnsafeFibonaccieServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FibonaccieServer will
// result in compilation errors.
type UnsafeFibonaccieServer interface {
	mustEmbedUnimplementedFibonaccieServer()
}

func RegisterFibonaccieServer(s grpc.ServiceRegistrar, srv FibonaccieServer) {
	s.RegisterService(&Fibonaccie_ServiceDesc, srv)
}

func _Fibonaccie_GetFibonacciStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Range)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FibonaccieServer).GetFibonacciStream(m, &fibonaccieGetFibonacciStreamServer{stream})
}

type Fibonaccie_GetFibonacciStreamServer interface {
	Send(*FibonaccieItems) error
	grpc.ServerStream
}

type fibonaccieGetFibonacciStreamServer struct {
	grpc.ServerStream
}

func (x *fibonaccieGetFibonacciStreamServer) Send(m *FibonaccieItems) error {
	return x.ServerStream.SendMsg(m)
}

// Fibonaccie_ServiceDesc is the grpc.ServiceDesc for Fibonaccie service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fibonaccie_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fibonaccie.Fibonaccie",
	HandlerType: (*FibonaccieServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFibonacciStream",
			Handler:       _Fibonaccie_GetFibonacciStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fibonaccie.proto",
}
